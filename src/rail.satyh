@require: pervasives
@require: base/list-ext
@require: base/length
@require: base/tuple
@require: option
@require: color
@require: gr

% どちらも同じ型だが、
% point は座標上の一点を表したいときに、
% vector はベクトルを表したいときに使うことにしている。
type point = length * length
type vector = length * length

% 一本の直線ないしベジェ曲線を表す型。
% ただし、絶対位置について抽象化されている。有向線分に対するベクトルみたいな立ち位置。
% (v-dest, v-ctl1, v-ctl2) に対し、
%   v-dest: 原点を始点としたときの終点
%   v-ctl1: 始点に対する制御点（始点を原点としたときの相対座標）
%   v-ctl2: 終点に対する制御点（終点を原点としたときの相対座標）
% を表す。 v-ctl1, v-ctl2 が (0pt, 0pt) に等しいときは直線を表す。
type curve = vector * vector * vector

% vector 同士の和・差
let (+.+) (x1, y1) (x2, y2) = (x1 +' x2, y1 +' y2)
let (-.-) (x1, y1) (x2, y2) = (x1 -' x2, y1 -' y2)

% vector とスカラーの積
let (*..) (x, y) f = (x *' f, y *' f)

% vector 同士の比較
let (=') (x1, y1) (x2, y2) = Length.(x1 == x2 && y1 == y2)

% 極座標による vector の生成
let (^.) l angle =
  let rad = angle *. math-pi /. 180. in
  (l *' (cos rad), l *' (sin rad))

% vector の回転
let (^.^) (x, y) angle =
  let rad = angle *. math-pi /. 180. in
  (
    x *' (cos rad) -' y *' (sin rad),
    x *' (sin rad) +' y *' (cos rad)
  )

  let inner-point pt1 pt2 t = pt1 *.. (1. -. t) +.+ pt2 *.. t

  let bezier-at t c =
    let p00 = (0pt, 0pt) in
    let (p03, v01, v02) = c in
    let p01 = p00 +.+ v01 in
    let p02 = p03 +.+ v02 in
    let p10 = inner-point p00 p01 t in
    let p11 = inner-point p01 p02 t in
    let p12 = inner-point p02 p03 t in
    let p20 = inner-point p10 p11 t in
    let p21 = inner-point p11 p12 t in
    inner-point p20 p21 t

  % Bezier 曲線を、曲線上の1点で分割
  let split-bezier t c =
    % pij と pi(j+1) を t : (1 - t) に内分して p(i+1)j ができるとする
    let p00 = (0pt, 0pt) in
    let (p03, v01, v02) = c in
    let p01 = p00 +.+ v01 in
    let p02 = p03 +.+ v02 in
    let p10 = inner-point p00 p01 t in
    let p11 = inner-point p01 p02 t in
    let p12 = inner-point p02 p03 t in
    let p20 = inner-point p10 p11 t in
    let p21 = inner-point p11 p12 t in
    let p30 = inner-point p20 p21 t in

    % 分割後のベジェ曲線1は、 p00, p10, p20, p30 を制御点に持つ
    let split-curve-1 = ((p30 -.- p00), (p10 -.- p00), (p20 -.- p30)) in
    % 分割後のベジェ曲線2は、 p30, p21, p12, p03 を制御点に持つ
    let split-curve-2 = ((p03 -.- p30), (p21 -.- p30), (p12 -.- p03)) in

    (split-curve-1, split-curve-2)

  % Bezier 曲線の一部を抜き出す。
  let partial-bezier t1 t2 c =
    % 0. <= t1 < t2 <= 1. の時以外は有効な曲線の一部ではないとする
    if not Float.(0. <= t1 && t1 < t2 && t2 <= 1.0) then
      ((0pt, 0pt), (0pt, 0pt), (0pt, 0pt))
    else
      if Float.(t1 == 1.) then
        % 上の条件からここに来ることはないはずだが、零割を確実に避けるよう念の為
        ((0pt, 0pt), (0pt, 0pt), (0pt, 0pt))
      else
        let (_, c1) = split-bezier t1 c in
        let t = (t2 -. t1) /. (1. -. t1) in
        let (c2, _) = split-bezier t c1 in
        c2

module Rail : sig

  type rail

% rail の作成
  val init: rail
  val from-curves: curve list -> rail
  val push-line: vector -> rail -> rail
  val push-curve: curve -> rail -> rail
  val push-smooth-curve: vector -> vector -> rail -> rail
  val circular-sector: float?-> length -> rail  % 半径と角度を指定した円弧

% rail の結合
  val append: rail -> rail -> rail
  val concat: rail list -> rail
  val (---): rail -> rail -> rail  % 結合

% 
  val get-curves: rail -> curve list

% rail から path への変換
  val to-pre-path: point -> rail -> pre-path
  val to-path: point -> rail -> path
  val to-loop: point -> rail -> path

% rail の補助情報の取得
  val length: rail -> int
  val dest: rail -> vector  % レールの終着点。
  % val dest-nth: int -> rail -> vector option
  % val ctrl-nth: int -> rail -> (vector * vector) option

% rail の描画（基本的には path に変換するのがよい）
  val gr-debug: color?-> length?-> point -> rail -> graphics list

% rail の変換
  val (*): rail -> float -> rail  % スケール
  val (^): rail -> float -> rail  % 回転
  val scale: float -> float -> rail -> rail  % スケール
  val reflect-x: rail -> rail  % x軸方向の（y軸を対称軸とした）反転
  val reflect-y: rail -> rail  % y軸方向の（x軸を対称軸とした）反転
  val affine-trans: (float * float * float * float) -> rail -> rail
  val reverse: rail -> rail  % 曲線の形は変えないが、始点と終点を反転させる。
  val repeat: int -> rail -> rail  % 同じrailをn個つなげる
  val map-repeat: (int -> rail) -> int -> rail  % 生成規則 f(idx, prev-rail) にしたがってn回繰り返す

% 部分的な切り取り
  % val at: float -> rail -> vector option
  % val partial: int -> int -> rail -> rail
  % val trim: float -> float -> rail -> rail

end = struct

  type rail = curve list

% 便利関数

  let minus l = 0pt -' l

  let-rec range n1 n2 =
    let-rec aux min max =
      if min == max  then [min] else min :: (aux (min + 1) max)
    in
    if n1 <= n2 then (aux n1 n2) else []


% rail の作成

  let init = []

  let from-curves curvelst = curvelst
  let get-curves curvelst = curvelst

  let push-curve curve rail = List.append rail [curve]

  let push-line v rail =
    let line = (v, (0pt, 0pt), (0pt, 0pt)) in
    List.append rail [line]

  let push-smooth-curve v v-ctl rail =
    let (_, _, (x-last-ctl, y-last-ctl)) =
      rail |> List.last
           |> Option.from ((0pt, 0pt), (0pt, 0pt), (0pt, 0pt))
    in
    List.append rail [(v, (minus x-last-ctl, minus y-last-ctl), v-ctl)]

  let append rail1 rail2 = List.append rail1 rail2
  let (---) rail1 rail2 = append rail1 rail2

  let concat raillst = List.concat raillst

% rail から path への変換

  let to-pre-path pt rail =

    let-rec aux rail-rev =
      match rail-rev with
      | [] ->
          (pt |> start-path, pt)
      | curve :: rest -> (
          let (v-dest, v-ctl1, v-ctl2) = curve in
          let (pth, pt-tmp) = aux rest in
          if v-ctl1 =' (0pt, 0pt) && v-ctl2 =' (0pt, 0pt) then
            (
              pth |> line-to (pt-tmp +.+ v-dest),
              pt-tmp +.+ v-dest
            )
          else
            (
              pth |> bezier-to (pt-tmp +.+ v-ctl1)
                (pt-tmp +.+ v-dest +.+ v-ctl2) (pt-tmp +.+ v-dest),
              pt-tmp +.+ v-dest
            )
      )
    in

    aux (List.reverse rail) |> Pair.fst

  let to-path pt rail =
    to-pre-path pt rail |> terminate-path

  let to-loop pt rail =
    to-pre-path pt rail |> close-with-line

% rail の補助情報の取得

  let dest rail =
    let sum vect curve =
      let (v-dest, _, _) = curve in
      vect +.+ v-dest
    in
    rail |> List.fold-left sum (0pt, 0pt)

  let length rail = List.length rail

% rail の描画

  let gr-debug ?:clr ?:thk pt rail =
    let clr = clr |> Option.from Color.black in
    let thk = thk |> Option.from 1pt in
    let pth = rail |> to-path pt in

    let grlst-vertex pt = [ fill clr (Gr.circle pt (thk *' 0.45)) ] in
    let grlst-handle pt-start pt-end =
      List.concat [
        grlst-vertex pt-start;
        [fill clr (Gr.circle pt-end (thk *' 0.35))];
        [ stroke (thk *' 0.3) clr (Gr.line pt-start pt-end) ];
      ]
    in

    let-rec aux rail-rev =
      match rail-rev with
      | [] ->
          (grlst-vertex pt, pt)
      | curve :: rest -> (
          let (v-dest, v-ctl1, v-ctl2) = curve in
          let (gr-lst, pt-tmp) = aux rest in
          let pt-next = pt-tmp +.+ v-dest in
          if v-ctl1 =' (0pt, 0pt) && v-ctl2 =' (0pt, 0pt) then
            (
              List.concat [ grlst-vertex pt-next ; gr-lst; ],
              pt-next
            )
          else
            (
              List.concat [
                grlst-handle pt-tmp (pt-tmp +.+ v-ctl1);
                grlst-handle pt-next (pt-next +.+ v-ctl2);
                gr-lst;
              ],
              pt-next
            )
      )
    in

    let aux-lines = aux (List.reverse rail) |> Pair.fst in
    List.concat [
      [
        stroke thk (Color.gray 0.5) pth;
        stroke (thk *' 0.3) clr pth;
      ];
      aux-lines;
    ]

% rail の変換

  let (*) rail scale =
    let f curve =
      let ((x-dest, y-dest), (x-ctl1, y-ctl1), (x-ctl2, y-ctl2)) = curve in
      (
        (x-dest *' scale, y-dest *' scale),
        (x-ctl1 *' scale, y-ctl1 *' scale),
        (x-ctl2 *' scale, y-ctl2 *' scale)
      )
    in
    rail |> List.map f

  let affine-trans-vector mat v =
    let (a, b, c, d) = mat in
    let (x, y) = v in
    (x *' a +' y *' b, x *' c +' y *' d)

  let affine-trans-line mat curve =
    let (v-dest, v-ctl1, v-ctl2) = curve in
    (
      affine-trans-vector mat v-dest,
      affine-trans-vector mat v-ctl1,
      affine-trans-vector mat v-ctl2
    )

  let affine-trans mat rail = rail |> List.map (affine-trans-line mat)

  let (^) rail angle =
    let rad = angle *. math-pi /. 180. in
    rail |> affine-trans (cos rad, 0. -. (sin rad), sin rad, cos rad)

  let scale xr yr = affine-trans (xr, 0., 0., yr)

  let reflect-x = affine-trans ((0. -. 1.), 0., 0., 1.)
  let reflect-y = affine-trans (1., 0., 0., (0. -. 1.))

  % reverse
  let reverse-line curve =
    let ((x-dest, y-dest), (x-ctl1, y-ctl1), (x-ctl2, y-ctl2)) = curve in
    ((minus x-dest, minus y-dest), (x-ctl2, y-ctl2), (x-ctl1, y-ctl1))

  let reverse rail =
    rail |> List.map reverse-line |> List.reverse

  let repeat n rail = rail |> List.cycle- n

  let map-repeat railf n = List.concat (range 0 (n - 1) |> List.map railf)

% 円弧

  % ひとまず 0 <= angle <= 90 を仮定
  let circular-sector-between-0-90 angle radius =
    let center = (minus radius, 0pt) in
    let dest = center +.+ (radius ^. angle) in
    let len-ctl = radius *' ((4.0 /. 3.0) *. (tan (angle *. math-pi /. 720.))) in  % 制御ハンドルの長さ
    let pt-ctl-begin = (0pt, len-ctl) in
    let pt-ctl-end = (0pt, minus len-ctl) ^.^ angle in

    from-curves [(dest, pt-ctl-begin, pt-ctl-end)]

  % float を float で割ったときの商と余りを求める。
  % ただし flt1 > 0, flt2 > 0 を仮定する。
  let float-mod flt1 flt2 =
    let-rec aux (q, r) =
      if Float.(r < flt2) then
        (q, r)
      else
        aux (q + 1, r -. flt2)
    in
    aux (0, flt1)

  let circular-sector ?:angle radius =
    let angle = angle |> Option.from 90.0 in

    let aux angle =
      let (q, r) = float-mod angle 90.0 in
      let curve1 =
        map-repeat (
          fun i -> (circular-sector-between-0-90 90. radius) ^ (90. *. (float i))
        ) q
      in
      let curve2 = (circular-sector-between-0-90 r radius) ^ (90. *. (float q)) in
      concat [curve1; curve2]
    in

    if Float.(angle > 0.) then
      aux angle
    else
      aux (0. -. angle) |> reflect-y

% Bezier 曲線の分割

end
